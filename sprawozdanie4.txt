Lista 4 - sprawozdanie
Nel Skowronek 279679

//------------------2.-------------------
Tworzenie kolekcji z walidacja:
(pole _id jest tworzone automatycznie)

db.createCollection("authors", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "country", "birth", "death"],
      properties: {
        name: {
          bsonType: "object",
          required: ["first", "last"],
          properties: {
            first: { bsonType: "string" },
            last: { bsonType: "string" }
          }
        },
        country: { bsonType: "string" },
        birth: { bsonType: "date" },
        death: { bsonType: ["date", "null"] }
      }
    }
  },
  validationAction: "error"
});

db.createCollection("books", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["title", "isbn", "publication_year", "language", "author", "publisher"],
      properties: {
        title: { bsonType: "string" },
        isbn: { bsonType: "string" },
        publication_year: { bsonType: "int" },
        language: { bsonType: "string" },
        author: { bsonType: "objectId" },
        publisher: {
          bsonType: "object",
          required: ["name", "country"],
          properties: {
            name: { bsonType: "string" },
            country: { bsonType: "string" }
          }
        }
      }
    }
  },
  validationAction: "error"
});

Z tak okreslona walidacja mozna wpisac date smierci jako null,
ale zadne inne pole juz nie. 
Mozna dodac obiekt z dodatkowymi danymi, lecz nie z brakujacymi.
Przyklady:

//------------------------------------------
Wstawianie danych:

- Poprawne dane:

db.authors.insertMany([
  {
    name: { first: "J.R.R", last: "Tolkien" },
    country: "UK",
    birth: new Date('1892-01-03'),
    death: new Date('1973-09-02')
  },
  {
    name: { first: "Stanisław", last: "Lem" },
    country: "Poland",
    birth: new Date('1921-09-12'),
    death: new Date('2006-03-27')
  },
  {
    name: { first: "Olga", last: "Tokarczuk" },
    country: "Poland",
    birth: new Date('1962-01-29'),
    death: null
  },
  {
    name: { first: "George", last: "Orwell" },
    country: "UK",
    birth: new Date('1903-06-25'),
    death: new Date('1950-01-21')
  }
]);

db.authors.insertOne({
  name: { first: "William", last: "Shakespeare" },
  country: "UK",
  birth: new Date("1564-04-23"),
  death: new Date("1616-04-23"),
  favourite_color: "Blue"
});

db.books.insertMany([
  {
    title: "The Hobbit",
    isbn: "978-0-261-10295-6",
    publication_year: 1937,
    language: "English",
    author: db.authors.findOne({ "name.last": "Tolkien" })._id,
    publisher: { name: "George Allen & Unwin", country: "UK" }
  },
  {
    title: "Solaris",
    isbn: "978-0-7432-7350-9",
    publication_year: 1961,
    language: "Polish",
    author: db.authors.findOne({ "name.last": "Lem" })._id,
    publisher: { name: "MON", country: "Poland" }
  },
  {
    title: "The Futurological Congress",
    isbn: "978-0-15-181329-6",
    publication_year: 1971,
    language: "Polish",
    author: db.authors.findOne({ "name.last": "Lem" })._id,
    publisher: { name: "Wydawnictwo Literackie", country: "Poland" }
  },
  {
    title: "The Cyberiad",
    isbn: "978-0-15-181362-3",
    publication_year: 1965,
    language: "Polish",
    author: db.authors.findOne({ "name.last": "Lem" })._id,
    publisher: { name: "Wydawnictwo Literackie", country: "Poland" }
  },
  {
    title: "Flights",
    isbn: "978-1-5247-3144-5",
    publication_year: 2007,
    language: "Polish",
    author: db.authors.findOne({ "name.last": "Tokarczuk" })._id,
    publisher: { name: "Wydawnictwo Literackie", country: "Poland" }
  }
]);

- Niepoprawne dane:

db.authors.insertOne({
    name: { first: "Michael", last: "Jackson" }
    });

db.books.insertOne({
  title: "Hamlet",
  isbn: "978-0-14-139650-7",
  publication_year: 1603,
  language: "English",
  author: null,
  publisher: {
    name: "Penguin Classics",
    country: "UK"
  }
});

//---------------------------------------------
Tworzenie kolekcji Recenzje:

db.createCollection("reviews", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["book", "reviewer", "rating", "review_text"],
      properties: {
        book_id: { bsonType: "objectId" },
        reviewer: { bsonType: "objectId" },
        rating: {
          bsonType: "int",
          minimum: 1,
          maximum: 5
        },
        review_text: { bsonType: "string" }
      }
    }
  },
  validationAction: "error"
});

Tworzenie przykladowego reviewera, zeby mozna bylo uzyc id:

db.createCollection("reviewers");

db.reviewers.insertMany([
    { name: "Arnie The Reviewer" },
    { name: "Bernie The Reviewer" },
    { name: "Charlie The Reviewer" }
]);

//--------------------------------------------------
Dodawanie recenzji:

db.reviews.insertMany([
  {
    book: db.books.findOne({ "title": "The Hobbit" })._id,
    reviewer: db.reviewers.findOne({ "name": "Arnie The Reviewer" })._id,
    rating: 5,
    review_text: "An absolutely fantastic read! Highly recommended."
  },
  {
    book: db.books.findOne({ "title": "The Hobbit" })._id,
    reviewer: db.reviewers.findOne({ "name": "Bernie The Reviewer" })._id,
    rating: 4,
    review_text: "Very engaging story, but could have been a bit shorter."
  },
  {
    book: db.books.findOne({ "title": "The Hobbit" })._id,
    reviewer: db.reviewers.findOne({ "name": "Charlie The Reviewer" })._id,
    rating: 2,
    review_text: "Not my cup of tea, but I can see why others might like it."
  },
  {
    book: db.books.findOne({ "title": "Flights" })._id,
    reviewer: db.reviewers.findOne({ "name": "Bernie The Reviewer" })._id,
    rating: 3,
    review_text: "An average book with some good moments."
  },
  {
    book: db.books.findOne({ "title": "Solaris" })._id,
    reviewer: db.reviewers.findOne({ "name": "Bernie The Reviewer" })._id,
    rating: 5,
    review_text: "A masterpiece! Will read it again for sure."
  },
  {
    book: db.books.findOne({ "title": "Flights" })._id,
    reviewer: db.reviewers.findOne({ "name": "Charlie The Reviewer" })._id,
    rating: 1,
    review_text: "I didn't enjoy this book at all. Found it very boring."
  }
]);

Przyjeta metoda anonimizuje reviewera - nie trzeba znac
jego konkretnych danych aby wystawic / przeczytac Recenzje


//-------------------------------------------
Dodawanie pole

Trzeba nadpisac walidator authors i books

db.runCommand({
  collMod: "authors",
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "country", "birth", "death", "awards"],
      properties: {
        name: {
          bsonType: "object",
          required: ["first", "last"],
          properties: {
            first: { bsonType: "string" },
            last: { bsonType: "string" }
          }
        },
        country: { bsonType: "string" },
        birth: { bsonType: "date" },
        death: { bsonType: ["date", "null"] },
        awards: {
          bsonType: "array",
          items: {
            bsonType: "object",
            required: ["name", "year"],
            properties: {
              name: { bsonType: "string" },
              year: { bsonType: "int" }
            }
          }
        }
      }
    }
  },
  validationAction: "error"
});

db.runCommand({
  collMod: "books",
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["title", "isbn", "publication_year", "language", "author", "publisher", "genres"],
      properties: {
        title: { bsonType: "string" },
        isbn: { bsonType: "string" },
        publication_year: { bsonType: "int" },
        language: { bsonType: "string" },
        author: { bsonType: "objectId" },
        publisher: {
          bsonType: "object",
          required: ["name", "country"],
          properties: {
            name: { bsonType: "string" },
            country: { bsonType: "string" }
          }
        },
        genres: {
          bsonType: "array",
          items: { bsonType: "string" }
        }
      }
    }
  },
  validationAction: "error"
});

//------------------------------
Update danych

db.authors.updateOne(
  { "name.first": "Olga", "name.last": "Tokarczuk" },
  {
    $set: { awards: [
      { name: "Nobel Prize in Literature", year: 2018 },
      { name: "Nike Award", year: 2008 },
      { name: "Nike Award", year: 2015 }
    ]}
  }
);

db.authors.updateOne(
  { "name.first": "Stanisław", "name.last": "Lem" },
  {
    $set: { awards: [
      { name: "Austrian State Prize for European Literature", year: 1985 },
      { name: "Janusz A. Zajdel Award", year: 1987 },
      { name: "Franz Kafka Prize", year: 1991 }
    ]}
  }
);

db.authors.updateOne(
  { "name.first": "George", "name.last": "Orwell" },
  {
    $set: { awards: [
      { name: "Prometheus Hall of Fame Award", year: 1984 },
      { name: "Retro-Hugo Award for Best Novella", year: 1946 },
      { name: "James Tait Black Memorial Prize", year: 1937 }
    ]}
  }
);

db.authors.updateMany(
  { awards: { $exists: false } },
  { $set: { awards: [] } }
);


db.books.updateOne(
  { title: "The Hobbit" }, // Dopasowanie po tytule
  { $set: { genres: ["Fantasy", "Adventure"] } }
);

db.books.updateOne(
  { title: "Solaris" },
  { $set: { genres: ["Science Fiction", "Philosophical Fiction"] } }
);

db.books.updateOne(
  { title: "The Futurological Congress" },
  { $set: { genres: ["Science Fiction", "Satire", "Dystopia"] } }
);

db.books.updateOne(
  { title: "The Cyberiad" },
  { $set: { genres: ["Science Fiction", "Humor", "Short Stories"] } }
);

db.books.updateOne(
  { title: "Flights" },
  { $set: { genres: ["Literary Fiction", "Philosophical Fiction", "Travel Literature"] } }
);

db.books.updateMany(
  { genres: { $exists: false } },
  { $set: { genres: [] } }
);


//--------------3---------------

1.
db.books.find({ 
  author: db.authors.findOne({ 
    "name.first": "Olga", 
    "name.last": "Tokarczuk"
  })._id
});

2.
db.books.find({
  language: "Polish",
  genres: "Fantasy"
});

3.
db.books.aggregate([
  {
    $lookup: {
      from: "reviews",
      localField: "_id",
      foreignField: "book",
      as: "book_reviews"
    }
  },
  {
    $addFields: {
      avgRating: { $avg: "$book_reviews.rating" }
    }
  },
  {
    $match: {
      avgRating: { $gte: 4 }
    }
  },
  {
    $project: {
      title: 1,
      avgRating: 1
    }
  }
]);

4.
db.books.aggregate([
  {
    $lookup: {
      from: "authors",
      localField: "author",
      foreignField: "_id",
      as: "book_author"
    }
  },
  {
    $unwind: "$book_author"
  },
  {
    $match: {
      "book_author.country": "Poland"
    }
  },
  {
    $lookup: {
      from: "reviews",
      localField: "_id",
      foreignField: "book",
      as: "book_reviews"
    }
  },
  {
    $addFields: {
      avgRating: { $avg: "$book_reviews.rating" }
    }
  },
  {
    $project: {
      title: 1,
      authorName: { $concat: ["$book_author.name.first", " ", "$book_author.name.last"] },
      avgRating: 1
    }
  }
]);
